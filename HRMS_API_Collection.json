{
  "info": {
    "name": "HRMS API Collection - Updated",
    "description": "Complete API collection for the HR Management System with automatic auth token management",
    "version": "1.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:4000",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "üìö API Documentation",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/docs",
          "host": ["{{base_url}}"],
          "path": ["docs"]
        },
        "description": "Access the Swagger API documentation interface"
      }
    },
    {
      "name": "üîç Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Server is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('Health Check - Status:', pm.response.status);",
                  "console.log('Server Response Time:', pm.response.responseTime + 'ms');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            },
            "description": "Register a new user account"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Auto-save auth token if provided in register response",
                  "if (pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.token) {",
                  "            pm.collectionVariables.set('auth_token', response.token);",
                  "            pm.environment.set('auth_token', response.token);",
                  "            console.log('‚úÖ Auth token saved automatically from registration');",
                  "            console.log('Token preview:', response.token.substring(0, 20) + '...');",
                  "        } else if (response.data && response.data.token) {",
                  "            pm.collectionVariables.set('auth_token', response.data.token);",
                  "            pm.environment.set('auth_token', response.data.token);",
                  "            console.log('‚úÖ Auth token saved automatically from registration (nested)');",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚ö†Ô∏è Could not parse registration response for token');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Registration failed with status:', pm.response.status);",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            },
            "description": "Login and get authentication token - Token will be automatically saved"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Enhanced auto-save auth token from login response",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        let token = null;",
                  "        ",
                  "        // Try different possible token locations",
                  "        if (response.token) {",
                  "            token = response.token;",
                  "        } else if (response.data && response.data.token) {",
                  "            token = response.data.token;",
                  "        } else if (response.accessToken) {",
                  "            token = response.accessToken;",
                  "        } else if (response.access_token) {",
                  "            token = response.access_token;",
                  "        } else if (response.authToken) {",
                  "            token = response.authToken;",
                  "        }",
                  "        ",
                  "        if (token) {",
                  "            // Save to both collection variables and environment",
                  "            pm.collectionVariables.set('auth_token', token);",
                  "            pm.environment.set('auth_token', token);",
                  "            ",
                  "            console.log('‚úÖ Auth token saved successfully!');",
                  "            console.log('Token preview:', token.substring(0, 30) + '...');",
                  "            ",
                  "            // Show user info if available",
                  "            if (response.user) {",
                  "                console.log('üë§ Logged in as:', response.user.name || response.user.email);",
                  "            }",
                  "        } else {",
                  "            console.log('‚ö†Ô∏è No token found in login response');",
                  "            console.log('Response structure:', Object.keys(response));",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚ùå Error parsing login response:', e.message);",
                  "        console.log('Raw response:', pm.response.text());",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Login failed with status:', pm.response.status);",
                  "    console.log('Error response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "logout"]
            },
            "description": "Logout user and clear token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Clear auth token on successful logout",
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('auth_token', '');",
                  "    pm.environment.set('auth_token', '');",
                  "    console.log('‚úÖ Logged out successfully - Auth token cleared');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Logout response:', pm.response.status);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ü§ñ AI Employee Creation",
      "item": [
        {
          "name": "Create Employee via AI",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"prompt\": \"Please create new records for three new hires. First, John Doe, a Software Engineer in the Engineering department starting on 2025-01-15, his email is john.doe@company.com. Second, Jane Smith, a Product Manager in the Product department starting on 2025-01-20, her email is jane.smith@company.com. Finally, Mark Johnson will be joining as a Senior Data Scientist in the Data Science department with a start date of 2025-02-01, his email is mark.johnson@company.com.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"]
            },
            "description": "Create employee(s) using AI processing with natural language description. Required field: prompt (string)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"AI Employee Creation Status\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.employees || response.data) {",
                  "            const employees = response.employees || response.data;",
                  "            console.log(`‚úÖ Successfully created ${employees.length} employee(s) via AI`);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚úÖ AI employee creation successful');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Single Employee via AI",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"prompt\": \"Create a new employee record for Sarah Wilson, who is joining as a Marketing Specialist in the Marketing department. Her email is sarah.wilson@company.com and she starts on 2025-01-25.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"]
            },
            "description": "Create a single employee using AI processing"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Single AI Employee Creation\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë• Employee Management",
      "item": [
        {
          "name": "Get All Employees",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" },
                { "key": "department", "value": "Engineering", "disabled": true },
                { "key": "status", "value": "active", "disabled": true },
                { "key": "search", "value": "john", "disabled": true }
              ]
            },
            "description": "Get all employees with pagination, filtering, and search. Query params: page, limit, department, status, search. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get Employees Success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        const count = response.employees ? response.employees.length : (response.data ? response.data.length : 0);",
                  "        console.log(`üìä Found ${count} employees`);",
                  "    } catch (e) {",
                  "        console.log('üìä Employee data retrieved');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Employee by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "1"]
            },
            "description": "Get a specific employee by their ID. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get Employee by ID\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Employee",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John Updated\",\n  \"last_name\": \"Doe Updated\",\n  \"email\": \"john.updated@company.com\",\n  \"job_title\": \"Senior Software Engineer\",\n  \"department\": \"Engineering\",\n  \"joining_date\": \"2025-01-15\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "1"]
            },
            "description": "Update an existing employee. All fields are optional. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Update Employee Success\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Employee",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "1"]
            },
            "description": "Delete an employee by ID. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Delete Employee Success\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Statistics & Reports",
      "item": [
        {
          "name": "Get Employee Statistics",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/employees/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "employees", "stats"]
            },
            "description": "Get comprehensive employee statistics including counts by department. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get Stats Success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Departments",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/departments",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "departments"]
            },
            "description": "Get all departments with employee counts. Requires Bearer token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get Departments Success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "10" },
                { "key": "search", "value": "john", "disabled": true }
              ]
            },
            "description": "Get all users with pagination and search"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get Users Success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{auth_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "1"]
            },
            "description": "Get a specific user by their ID"
          }
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Smith\",\n  \"email\": \"jane.smith@company.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users"]
            },
            "description": "Create a new user account"
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Updated\",\n  \"email\": \"john.updated@company.com\",\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "1"]
            },
            "description": "Update an existing user"
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "1"]
            },
            "description": "Delete a user by ID"
          }
        },
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "stats"]
            },
            "description": "Get user statistics including total users and creation trends"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check if auth token is available",
          "const token = pm.collectionVariables.get('auth_token') || pm.environment.get('auth_token');",
          "",
          "if (!token && pm.request.url.path.some(path => !['health', 'auth', 'docs'].includes(path))) {",
          "    console.log('‚ö†Ô∏è No auth token found. Please login first.');",
          "} else if (token) {",
          "    pm.collectionVariables.set('auth_token', token);",
          "    console.log('üîë Using auth token:', token.substring(0, 20) + '...');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global response logging",
          "console.log('üì° Request:', pm.request.method, pm.request.url.toString());",
          "console.log('üìä Status:', pm.response.status, pm.response.code);",
          "console.log('‚è±Ô∏è Time:', pm.response.responseTime + 'ms');",
          "",
          "// Handle authentication errors globally",
          "if (pm.response.code === 401) {",
          "    console.log('üö´ Authentication failed - Token may be expired or invalid');",
          "    console.log('üí° Try logging in again to get a fresh token');",
          "} else if (pm.response.code === 403) {",
          "    console.log('üö´ Access forbidden - Insufficient permissions');",
          "} else if (pm.response.code >= 500) {",
          "    console.log('üí• Server error - Check server logs');",
          "}"
        ]
      }
    }
  ]
}